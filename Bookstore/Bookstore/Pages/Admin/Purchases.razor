@page "/admin/purchases"
@inherits OwningComponentBase<IPurchaseRepository>

@* Creates 2 seperate tables and passes in parameters *@
<PurchaseTable TableTitle="Not Shipped Purchases" Purchases="NotShippedPurchases"
               ButtonLabel="Shipped" PurchaseSelected="ShipPurchase"></PurchaseTable>
<PurchaseTable TableTitle="Shipped Purchases" Purchases="ShippedPurchases"
               ButtonLabel="Reset" PurchaseSelected="ResetPurchase"></PurchaseTable>

@* Refresh button to update data *@
<button class="btn btn-byu" @onclick="@(x => UpdateData())">Refresh Data</button>

@code {

    //Sets up attributes and methods to be used when creating the purchases tables
    public IPurchaseRepository repo => Service;

    public IEnumerable<Purchase> AllPurchases { get; set; }
    public IEnumerable<Purchase> NotShippedPurchases { get; set; }
    public IEnumerable<Purchase> ShippedPurchases { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        AllPurchases = await repo.Purchases.ToListAsync();
        NotShippedPurchases = AllPurchases.Where(x => !x.Shipped);
        ShippedPurchases = AllPurchases.Where(x => x.Shipped);
    }

    //Allows us to pass in a specific book and toggle the Purchase Shipped Atrribute by a click of a button
    public void ShipPurchase(int id) => UpdatePurchase(id, true);
    public void ResetPurchase(int id) => UpdatePurchase(id, false);

    private void UpdatePurchase(int id, bool shipped)
    {
        Purchase p = repo.Purchases.FirstOrDefault(x => x.PurchaseId == id);
        p.Shipped = shipped;
        repo.SavePurchase(p);
    }
}
